name: kopia-restore

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to restore from"
        type: choice
        required: true
        options: [alpha, staging]
      restore_prefix:
        description: "Path inside snapshot to restore (e.g., a/b/c or file.ext)"
        required: true
      snapshot_id:
        description: "Specific snapshot ID (leave empty for latest)"
        required: false
        default: ""
      restore_mode:
        description: "Where to put the restored files"
        type: choice
        required: true
        options: [preview, inplace]
        default: preview

jobs:
  restore:
    runs-on: container-builder

    steps:
      - name: Select environment
        id: sel
        run: |
          case "${{ github.event.inputs.env }}" in
            alpha)
              echo "REPO_BUCKET=edream-storage-dreams-alpha-backup" >> "$GITHUB_OUTPUT"
              echo "DST_BUCKET=edream-storage-dreams-alpha" >> "$GITHUB_OUTPUT"
              echo "R2_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
              echo "KOPIA_PASSWORD=${{ secrets.KOPIA_PASSWORD_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "AWS_ACCESS_KEY_ID=${{ secrets.R2_REPO_ACCESS_KEY_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.R2_REPO_SECRET_KEY_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "DST_KEY=${{ secrets.R2_SRC_READ_KEY_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "DST_SECRET=${{ secrets.R2_SRC_READ_SECRET_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "SNAP_ROOT=/mnt/r2alpha" >> "$GITHUB_OUTPUT"
              ;;
            staging)
              echo "REPO_BUCKET=edream-storage-dreams-staging-backup" >> "$GITHUB_OUTPUT"
              echo "DST_BUCKET=edream-storage-dreams-staging" >> "$GITHUB_OUTPUT"
              echo "R2_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
              echo "KOPIA_PASSWORD=${{ secrets.KOPIA_PASSWORD_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "AWS_ACCESS_KEY_ID=${{ secrets.R2_REPO_ACCESS_KEY_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.R2_REPO_SECRET_KEY_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "DST_KEY=${{ secrets.R2_SRC_READ_KEY_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "DST_SECRET=${{ secrets.R2_SRC_READ_SECRET_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "SNAP_ROOT=/mnt/r2staging" >> "$GITHUB_OUTPUT"
              ;;
          esac

      - name: Install rclone
        run: curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Install Kopia
        run: |
          sudo apt-get update && sudo apt-get install -y fuse3 jq rsync
          curl -fsSL https://kopia.io/signing-key | sudo gpg --dearmor -o /usr/share/keyrings/kopia-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/kopia-keyring.gpg] https://packages.kopia.io/apt/ stable main" | sudo tee /etc/apt/sources/list.d/kopia.list
          sudo apt-get update && sudo apt-get install -y kopia
          kopia --version

      - name: Configure rclone (destination)
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf <<EOF
          [dst]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ steps.sel.outputs.DST_KEY }}
          secret_access_key = ${{ steps.sel.outputs.DST_SECRET }}
          endpoint = https://${{ steps.sel.outputs.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
          EOF

      - name: Connect Kopia repo
        env:
          KOPIA_PASSWORD: ${{ steps.sel.outputs.KOPIA_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ steps.sel.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.sel.outputs.AWS_SECRET_ACCESS_KEY }}
        run: |
          kopia repository connect s3 \
            --bucket=${{ steps.sel.outputs.REPO_BUCKET }} \
            --endpoint=${{ steps.sel.outputs.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com \
            --region=auto

      - name: Determine snapshot ID
        id: snap
        run: |
          set -euo pipefail
          SNAP_IN="${{ github.event.inputs.snapshot_id }}"
          if [ -n "$SNAP_IN" ]; then
            SNAP="$SNAP_IN"
            echo "Using provided snapshot: $SNAP"
          else
            echo "Fetching latest snapshot ID..."
            SNAP="$(kopia snapshot list --json | jq -r '.[0].id')"
            if [ -z "$SNAP" ] || [ "$SNAP" = "null" ]; then
              echo "ERROR: No snapshots found"; exit 1
            fi
            echo "Using snapshot: $SNAP"
          fi
          echo "snap=$SNAP" >> "$GITHUB_OUTPUT"

      - name: Mount snapshot (no-op if already mounted)
        id: mnt
        run: |
          set -e
          mkdir -p /tmp/kopia-mount
          nohup kopia mount "${{ steps.snap.outputs.snap }}" /tmp/kopia-mount \
            > /tmp/kopia-mount.log 2>&1 &
          for i in $(seq 1 30); do mountpoint -q /tmp/kopia-mount && break || sleep 1; done
          mountpoint -q /tmp/kopia-mount || { echo "Mount failed"; tail -n 200 /tmp/kopia-mount.log; exit 1; }

      - name: Debug list snapshot contents (2 levels)
        run: |
          set -e
          if ! command -v tree >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y tree || true
          fi
          echo "Snapshot root up to 2 levels:"
          if command -v tree >/dev/null 2>&1; then
            tree -L 2 /tmp/kopia-mount | sed -n '1,500p'
          else
            echo "(tree not available, falling back to ls -al for root)"
            ls -al /tmp/kopia-mount | sed -n '1,200p'
          fi

      - name: Stage requested path from mounted snapshot
        run: |
          set -e
          RP="${{ github.event.inputs.restore_prefix }}"
          SRC_MOUNT="/tmp/kopia-mount/${RP}"

          mkdir -p /tmp/restore-root
          if [ -d "$SRC_MOUNT" ]; then
            DEST_DIR="/tmp/restore-root/${RP%/}"
            mkdir -p "$DEST_DIR"
            rsync -a --info=progress2 "$SRC_MOUNT/" "$DEST_DIR/"
            echo "RESTORE_KIND=dir" >> "$GITHUB_ENV"
            echo "RESTORED_DIR=$DEST_DIR" >> "$GITHUB_ENV"
          elif [ -f "$SRC_MOUNT" ]; then
            PARENT="$(dirname "$RP")"
            DEST_PARENT="/tmp/restore-root/${PARENT%/}"
            mkdir -p "$DEST_PARENT"
            rsync -a --info=progress2 "$SRC_MOUNT" "$DEST_PARENT/"
            echo "RESTORE_KIND=file" >> "$GITHUB_ENV"
            echo "RESTORED_PARENT=$DEST_PARENT" >> "$GITHUB_ENV"
            echo "RESTORE_FILE=$(basename "$RP")" >> "$GITHUB_ENV"
          else
            echo "ERROR: Path not found in snapshot: $SRC_MOUNT"
            echo "Snapshot root listing (ls -al):"
            ls -al /tmp/kopia-mount | sed -n '1,200p'
            fusermount3 -u /tmp/kopia-mount || true
            exit 1
          fi

          fusermount3 -u /tmp/kopia-mount || true

      - name: Copy restored files to destination (preview or inplace)
        run: |
          set -e
          MODE="${{ github.event.inputs.restore_mode }}"
          RP="${{ github.event.inputs.restore_prefix }}"
          if [ "$MODE" = "preview" ]; then
            TS=$(date -u +%Y-%m-%dT%H%M%SZ)
            DEST_BASE="dst:${{ steps.sel.outputs.DST_BUCKET }}/restores/${TS}"
          else
            DEST_BASE="dst:${{ steps.sel.outputs.DST_BUCKET }}"
          fi

          if [ "${RESTORE_KIND}" = "dir" ]; then
            SRC_DIR="${RESTORED_DIR%/}/"
            DEST_DIR="${DEST_BASE}/${RP%/}/"
            echo "Copy folder: $SRC_DIR -> $DEST_DIR"
            rclone copy "$SRC_DIR" "$DEST_DIR" --checkers=64 --transfers=32 --progress
          else
            BASENAME="${RESTORE_FILE}"
            SRC_DIR="${RESTORED_PARENT%/}/"
            DEST_DIR="${DEST_BASE}/$(dirname "$RP")/"
            echo "Copy file: $SRC_DIR$BASENAME -> $DEST_DIR"
            rclone copy "$SRC_DIR" "$DEST_DIR" \
              --include "$BASENAME" \
              --checkers=64 --transfers=32 --progress
          fi
