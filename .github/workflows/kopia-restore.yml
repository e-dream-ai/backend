name: kopia-restore

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to restore from"
        type: choice
        required: true
        options: [alpha, staging]
      restore_prefix:
        description: "Path inside snapshot to restore (e.g., a/b/c or file.ext)"
        required: true
      snapshot_id:
        description: "Specific snapshot ID (leave empty for latest)"
        required: false
        default: ""
      restore_mode:
        description: "Where to put the restored files"
        type: choice
        required: true
        options: [preview, inplace]
        default: preview

jobs:
  restore:
    runs-on: container-builder

    steps:
      - name: Select environment
        id: sel
        run: |
          case "${{ github.event.inputs.env }}" in
            alpha)
              echo "REPO_BUCKET=edream-storage-dreams-alpha-backup" >> "$GITHUB_OUTPUT"
              echo "DST_BUCKET=edream-storage-dreams-alpha" >> "$GITHUB_OUTPUT"
              echo "R2_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
              echo "KOPIA_PASSWORD=${{ secrets.KOPIA_PASSWORD_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "AWS_ACCESS_KEY_ID=${{ secrets.R2_REPO_ACCESS_KEY_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.R2_REPO_SECRET_KEY_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "DST_KEY=${{ secrets.R2_DST_WRITE_KEY_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "DST_SECRET=${{ secrets.R2_DST_WRITE_SECRET_ALPHA }}" >> "$GITHUB_OUTPUT"
              echo "SNAP_ROOT=/mnt/r2alpha" >> "$GITHUB_OUTPUT"
              ;;
            staging)
              echo "REPO_BUCKET=edream-storage-dreams-staging-backup" >> "$GITHUB_OUTPUT"
              echo "DST_BUCKET=edream-storage-dreams-staging" >> "$GITHUB_OUTPUT"
              echo "R2_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
              echo "KOPIA_PASSWORD=${{ secrets.KOPIA_PASSWORD_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "AWS_ACCESS_KEY_ID=${{ secrets.R2_REPO_ACCESS_KEY_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.R2_REPO_SECRET_KEY_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "DST_KEY=${{ secrets.R2_DST_WRITE_KEY_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "DST_SECRET=${{ secrets.R2_DST_WRITE_SECRET_STAGING }}" >> "$GITHUB_OUTPUT"
              echo "SNAP_ROOT=/mnt/r2staging" >> "$GITHUB_OUTPUT"
              ;;
          esac

      - name: Install rclone
        run: curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Install latest Kopia (static)
        run: |
          set -e
          sudo apt-get update && sudo apt-get install -y jq curl
          ARCH=$(uname -m | sed 's/x86_64/amd64/; s/aarch64/arm64/')
          VER=$(curl -fsSL https://api.github.com/repos/kopia/kopia/releases/latest | jq -r .tag_name | sed 's/^v//')
          curl -fsSL -o kopia.tar.gz "https://github.com/kopia/kopia/releases/download/v${VER}/kopia-linux-${ARCH}-v${VER}.tar.gz"
          tar -xzf kopia.tar.gz
          sudo mv "kopia-linux-${ARCH}-v${VER}/kopia" /usr/local/bin/kopia
          kopia --version

      - name: Configure rclone (destination)
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf <<EOF
          [dst]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ steps.sel.outputs.DST_KEY }}
          secret_access_key = ${{ steps.sel.outputs.DST_SECRET }}
          endpoint = https://${{ steps.sel.outputs.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
          EOF

      - name: Connect Kopia repo
        env:
          KOPIA_PASSWORD: ${{ steps.sel.outputs.KOPIA_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ steps.sel.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.sel.outputs.AWS_SECRET_ACCESS_KEY }}
        run: |
          kopia repository connect s3 \
            --bucket=${{ steps.sel.outputs.REPO_BUCKET }} \
            --endpoint=${{ steps.sel.outputs.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com \
            --region=auto

      - name: Determine snapshot ID
        id: snap
        run: |
          SNAP="${{ github.event.inputs.snapshot_id }}"
          if [ -z "$SNAP" ]; then
            SNAP=$(kopia snapshot list --json | jq -r '.[0].id')
          fi
          echo "snap=$SNAP" >> "$GITHUB_OUTPUT"
          echo "Using snapshot: $SNAP"

      - name: Restore selected prefix to temp (subpath only)
        run: |
          set -e
          mkdir -p /tmp/restore
          INSIDE_PATH="${{ steps.sel.outputs.SNAP_ROOT }}"/"${{ github.event.inputs.restore_prefix }}"
          echo "Restoring from: ${INSIDE_PATH}"
          # Positional path restore: <snap-id> "<inside-snapshot-path>" "<dest-dir>"
          kopia snapshot restore "${{ steps.snap.outputs.snap }}" \
            "${INSIDE_PATH}" \
            /tmp/restore

      - name: Copy restored files to destination (preview or inplace)
        run: |
          set -e
          MODE="${{ github.event.inputs.restore_mode }}"
          if [ "$MODE" = "preview" ]; then
            TS=$(date -u +%Y-%m-%dT%H%M%SZ)
            DEST="dst:${{ steps.sel.outputs.DST_BUCKET }}/restores/${TS}/${{ github.event.inputs.restore_prefix }}/"
          else
            DEST="dst:${{ steps.sel.outputs.DST_BUCKET }}/${{ github.event.inputs.restore_prefix }}/"
          fi
          echo "Copying to: $DEST"
          rclone copy /tmp/restore/ "$DEST" --checkers=64 --transfers=32 --progress
